{"version":3,"sources":["../src/index.js"],"names":["tracer","DEFAULT_CONFIG","sampler","type","param","reporter","logSpans","DEFAULT_OPTIONS","logger","info","msg","console","log","error","init","config","options","tracerConfig","tracerOptions","getParentSpan","format","injectData","extract","startSpan","spanName","spanOptions","R","omit","isChild","parentSpanContext","childOf","isFollowsFrom","references","inject","span","payload"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA,IAAIA,MAAJ;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,OADC;AAEPC,IAAAA,KAAK,EAAE;AAFA,GADY;AAKrBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE;AADF;AALW,CAAvB;AAUA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,IADM,gBACDC,GADC,EACI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,GAAvB;AACD,KAHK;AAING,IAAAA,KAJM,iBAIAH,GAJA,EAIK;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACD;AANK;AADc,CAAxB;;AAWA,IAAMI,IAAI,GAAG,SAAPA,IAAO,CAACC,MAAD,EAASC,OAAT,EAAqB;AAChC,MAAMC,YAAY,qBACbF,MADa,EAEbd,cAFa,CAAlB;;AAIA,MAAMiB,aAAa,qBACdF,OADc,EAEdT,eAFc,CAAnB;;AAIAP,EAAAA,MAAM,GAAG,qCAAkBiB,YAAlB,EAAgCC,aAAhC,CAAT;AACD,CAVD;;AAYA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASC,UAAT;AAAA,SAAwBrB,MAAM,CAACsB,OAAP,CAAeF,MAAf,EAAuBC,UAAvB,CAAxB;AAAA,CAAtB;;AAEA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,QAAD,EAA4B;AAAA,MAAjBR,OAAiB,uEAAP,EAAO;;AAC5C,MAAIS,WAAW,GAAGC,eAAEC,IAAF,CAAO,CAAC,SAAD,EAAY,eAAZ,CAAP,EAAqCX,OAArC,CAAlB;;AAEA,MAAIA,OAAO,CAACY,OAAR,IAAmB,QAAOZ,OAAO,CAACY,OAAf,MAA2B,QAAlD,EAA4D;AAC1D,QAAMC,iBAAiB,GAAGV,aAAa,CACrCH,OAAO,CAACY,OAAR,CAAgBR,MADqB,EAErCJ,OAAO,CAACY,OAAR,CAAgBP,UAFqB,CAAvC;AAIAI,IAAAA,WAAW,CAACK,OAAZ,GAAsBD,iBAAtB;AACD;;AAED,MAAIb,OAAO,CAACe,aAAR,IAAyB,QAAOf,OAAO,CAACe,aAAf,MAAiC,QAA9D,EAAwE;AACtE,QAAMF,kBAAiB,GAAGV,aAAa,CACrCH,OAAO,CAACe,aAAR,CAAsBX,MADe,EAErCJ,OAAO,CAACe,aAAR,CAAsBV,UAFe,CAAvC;;AAIAI,IAAAA,WAAW,CAACO,UAAZ,GAAyB,CAAC,8BAAYH,kBAAZ,CAAD,CAAzB;AACD;;AAED,SAAO7B,MAAM,CAACuB,SAAP,CAAiBC,QAAjB,EAA2BC,WAA3B,CAAP;AACD,CApBD;;AAsBA,IAAMQ,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAOd,MAAP,EAAee,OAAf;AAAA,SAA2BnC,MAAM,CAACiC,MAAP,CAAcC,IAAd,EAAoBd,MAApB,EAA4Be,OAA5B,CAA3B;AAAA,CAAf;;eAEe;AAAEnC,EAAAA,MAAM,EAANA,MAAF;AAAUc,EAAAA,IAAI,EAAJA,IAAV;AAAgBS,EAAAA,SAAS,EAATA,SAAhB;AAA2BU,EAAAA,MAAM,EAANA,MAA3B;AAAmCd,EAAAA,aAAa,EAAbA;AAAnC,C","sourcesContent":["import { initTracerFromEnv } from 'jaeger-client'\nimport { followsFrom } from 'opentracing'\nimport R from 'ramda'\n\nlet tracer\n\nconst DEFAULT_CONFIG = {\n  sampler: {\n    type: 'const',\n    param: 1\n  },\n  reporter: {\n    logSpans: true\n  }\n}\n\nconst DEFAULT_OPTIONS = {\n  logger: {\n    info(msg) {\n      console.log('INFO : ', msg)\n    },\n    error(msg) {\n      console.log('ERROR : ', msg)\n    }\n  }\n}\n\nconst init = (config, options) => {\n  const tracerConfig = {\n    ...config,\n    ...DEFAULT_CONFIG\n  }\n  const tracerOptions = {\n    ...options,\n    ...DEFAULT_OPTIONS\n  }\n  tracer = initTracerFromEnv(tracerConfig, tracerOptions)\n}\n\nconst getParentSpan = (format, injectData) => tracer.extract(format, injectData)\n\nconst startSpan = (spanName, options = {}) => {\n  let spanOptions = R.omit(['isChild', 'isFollowsFrom'], options)\n\n  if (options.isChild && typeof options.isChild === 'object') {\n    const parentSpanContext = getParentSpan(\n      options.isChild.format,\n      options.isChild.injectData\n    )\n    spanOptions.childOf = parentSpanContext\n  }\n\n  if (options.isFollowsFrom && typeof options.isFollowsFrom === 'object') {\n    const parentSpanContext = getParentSpan(\n      options.isFollowsFrom.format,\n      options.isFollowsFrom.injectData\n    )\n    spanOptions.references = [followsFrom(parentSpanContext)]\n  }\n\n  return tracer.startSpan(spanName, spanOptions)\n}\n\nconst inject = (span, format, payload) => tracer.inject(span, format, payload)\n\nexport default { tracer, init, startSpan, inject, getParentSpan }\n"],"file":"index.js"}